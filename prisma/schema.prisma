// This is your Prisma schema file for Pokemon TCG Deck Builder
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

// ==================== ENUMS ====================

enum Supertype {
  POKEMON
  TRAINER
  ENERGY
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  RARE_HOLO
  RARE_HOLO_EX
  RARE_HOLO_GX
  RARE_HOLO_V
  RARE_HOLO_VMAX
  RARE_HOLO_VSTAR
  RARE_ULTRA
  RARE_SECRET
  RARE_PRIME
  RARE_ACE
  RARE_BREAK
  LEGEND
  PROMO
  AMAZING_RARE
}

enum CardCondition {
  MINT
  NEAR_MINT
  LIGHTLY_PLAYED
  MODERATELY_PLAYED
  HEAVILY_PLAYED
  DAMAGED
}

enum DeckType {
  CONSTRUCTED
  LIMITED
  PRERELEASE
  THEME
  CUSTOM
}

enum DeckCategory {
  MAIN
  SIDEBOARD
}

enum PriceSource {
  CARDMARKET
  EBAY
  LOCAL
}

enum PriceType {
  MARKET
  LOW
  MID
  HIGH
  FOIL_LOW
  FOIL_MARKET
  FOIL_HIGH
}

enum Currency {
  USD
  EUR
  GBP
  CAD
  AUD
  JPY
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
  ULTIMATE
}

// ==================== MODELS ====================

// Sets represent TCG expansions/collections
model Set {
  id                String    @id
  code              String    @unique
  name              String
  series            String
  printedTotal      Int
  total             Int
  totalCards        Int       @default(0)
  releaseDate       DateTime
  updatedAt         DateTime  @updatedAt
  
  // Images
  logoUrl           String?
  symbolUrl         String?
  
  // External API mappings
  ptcgoCode         String?
  
  // Legalities
  isLegalStandard   Boolean   @default(false)
  isLegalExpanded   Boolean   @default(false)
  isLegalUnlimited  Boolean   @default(true)
  
  // Relationships
  cards             Card[]
  formats           Format[]  @relation("FormatSets")
  
  // Indexes
  @@index([series])
  @@index([releaseDate])
  @@index([isLegalStandard, isLegalExpanded])
}

// Cards represent individual Pokemon TCG cards
model Card {
  id                      String    @id
  name                    String
  supertype               Supertype
  subtypes                String[]
  level                   String?
  hp                      String?
  types                   String[]
  evolvesFrom             String?
  evolvesTo               String[]  @default([])
  
  // Game mechanics stored as JSON for flexibility
  attacks                 Json?     // Array of {name, cost[], damage, text}
  abilities               Json?     // Array of {name, type, text}
  weaknesses              Json?     // Array of {type, value}
  resistances             Json?     // Array of {type, value}
  rules                   String[]
  
  // Physical attributes
  retreatCost             String[]
  convertedRetreatCost    Int       @default(0)
  
  // Set information
  setId                   String
  set                     Set       @relation(fields: [setId], references: [id])
  number                  String
  printedNumber           String?
  collectorNumber         String?
  
  // Metadata
  artist                  String?
  rarity                  Rarity?
  flavorText              String?
  nationalPokedexNumbers  Int[]
  regulationMark          String?
  
  // Images
  imageUrlSmall           String
  imageUrlLarge           String
  
  // External IDs for pricing
  cardmarketId            String?   @unique
  
  // Legalities
  isLegalStandard         Boolean   @default(false)
  isLegalExpanded         Boolean   @default(false)
  isLegalUnlimited        Boolean   @default(true)
  
  // Timestamps
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  // Relationships
  collections             UserCollection[]
  deckCards               DeckCard[]
  prices                  CardPrice[]
  priceHistory            PriceHistory[]
  favoriteStrategies      Strategy[] @relation("StrategyCards")
  cardNotes               CardNote[]
  wantList                WantList[]
  
  // Indexes for search performance
  @@index([name])
  @@index([setId, number])
  @@index([supertype])
  @@index([types])
  @@index([rarity])
  @@index([artist])
  @@index([isLegalStandard, isLegalExpanded])
  @@index([cardmarketId])
  
  // Full text search
  @@index([name, flavorText], type: BTree)
}

// Users integrated with Clerk authentication
model User {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkUserId       String            @unique
  email             String            @unique
  username          String?           @unique
  displayName       String?
  avatarUrl         String?
  bio               String?
  
  // Subscription management
  subscriptionTier  SubscriptionTier  @default(FREE)
  subscriptionEnd   DateTime?
  
  // Preferences stored as JSON
  preferences       Json?             // {theme, language, notifications, etc}
  
  // Feature flags
  features          String[]          @default([])
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  lastActiveAt      DateTime          @default(now())
  
  // Relationships
  collections       UserCollection[]
  decks             Deck[]
  tradeOffers       TradeOffer[]     @relation("OfferedTrades")
  tradeRequests     TradeOffer[]     @relation("RequestedTrades")
  priceAlerts       PriceAlert[]
  tags              CollectionTag[]
  folders           CollectionFolder[]
  cardNotes         CardNote[]
  wantList          WantList[]
  snapshots         CollectionSnapshot[]
  tradingPartners   TradingPartner[] @relation("UserPartners")
  partnerOf         TradingPartner[] @relation("PartnerUsers")
  savedSearches     SavedSearch[]
  backups           CollectionBackup[]
  sharedCollections SharedCollection[]
  sharedWantLists   SharedWantList[]
  savedViews        SavedView[]
  notifications     Notification[]
  
  // Indexes
  @@index([clerkUserId])
  @@index([email])
  @@index([username])
  @@index([subscriptionTier])
}

// User's card collection and wishlist
model UserCollection {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String          @db.Uuid
  cardId          String
  quantity        Int             @default(1)
  quantityFoil    Int             @default(0)
  condition       CardCondition   @default(NEAR_MINT)
  language        String          @default("EN")
  purchasePrice   Decimal         @default(0) @db.Decimal(10, 2)
  acquiredAt      DateTime        @default(now())
  notes           String?
  onWishlist      Boolean         @default(false)
  forTrade        Boolean         @default(false)
  
  // New fields for collection management
  source          AcquisitionSource @default(OTHER)
  location        StorageLocation   @default(BINDER)
  tags            String[]          @default([])
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  
  // Relationships
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  card            Card            @relation(fields: [cardId], references: [id])
  
  // Constraints
  @@unique([userId, cardId, condition, location])
  
  // Indexes
  @@index([userId])
  @@index([cardId])
  @@index([onWishlist])
  @@index([forTrade])
  @@index([source])
  @@index([location])
  @@index([acquiredAt])
  @@index([tags])
}

// Deck formats (Standard, Expanded, etc.)
model Format {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String      @unique
  description     String?
  isActive        Boolean     @default(true)
  rotationDate    DateTime?
  maxDeckSize     Int         @default(60)
  maxCopies       Int         @default(4)
  
  // Relationships
  legalSets       Set[]       @relation("FormatSets")
  decks           Deck[]
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Indexes
  @@index([isActive])
}

// User's decks
model Deck {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  name            String
  description     String?
  formatId        String?     @db.Uuid
  deckType        DeckType    @default(CONSTRUCTED)
  isPublic        Boolean     @default(false)
  isComplete      Boolean     @default(false)
  tags            String[]    @default([])
  
  // Statistics
  wins            Int         @default(0)
  losses          Int         @default(0)
  draws           Int         @default(0)
  pokemonCount    Int         @default(0)
  trainerCount    Int         @default(0)
  energyCount     Int         @default(0)
  
  // Legality
  isLegal         Boolean     @default(true)
  rotationNotes   Json?       // Information about rotation-affected cards
  
  // Metadata
  coverCardId     String?
  notes           String?
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  lastPlayedAt    DateTime?
  deletedAt       DateTime?
  
  // Relationships
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  format          Format?     @relation(fields: [formatId], references: [id])
  cards           DeckCard[]
  matchups        Matchup[]   @relation("DeckMatchups")
  opponentIn      Matchup[]   @relation("OpponentMatchups")
  deckMigrations  DeckMigration[]
  
  // Indexes
  @@index([userId])
  @@index([formatId])
  @@index([isPublic])
  @@index([deckType])
  @@index([tags])
}

// Cards in a deck
model DeckCard {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  deckId          String        @db.Uuid
  cardId          String
  quantity        Int           @default(1)
  category        DeckCategory  @default(MAIN)
  position        Int?          // For maintaining order
  
  // Timestamps
  addedAt         DateTime      @default(now())
  
  // Relationships
  deck            Deck          @relation(fields: [deckId], references: [id], onDelete: Cascade)
  card            Card          @relation(fields: [cardId], references: [id])
  
  // Constraints
  @@unique([deckId, cardId, category])
  
  // Indexes
  @@index([deckId])
  @@index([cardId])
  @@index([category])
}

// Card pricing data
model CardPrice {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId          String
  source          PriceSource
  priceType       PriceType
  price           Decimal       @db.Decimal(10, 2)
  marketPrice     Decimal?      @db.Decimal(10, 2)
  currency        Currency      @default(USD)
  url             String?
  
  // Timestamps
  fetchedAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  card            Card          @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([cardId, source, priceType, currency])
  
  // Indexes
  @@index([cardId])
  @@index([source])
  @@index([updatedAt])
}

// Historical price tracking
model PriceHistory {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId          String
  date            DateTime      @db.Date
  source          PriceSource
  priceType       PriceType
  price           Decimal       @db.Decimal(10, 2)
  marketPrice     Decimal?      @db.Decimal(10, 2)
  currency        Currency      @default(USD)
  volume          Int?          // Trading volume if available
  createdAt       DateTime      @default(now())
  
  // Relationships
  card            Card          @relation(fields: [cardId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([cardId, date, source, priceType, currency])
  
  // Indexes
  @@index([cardId, date])
  @@index([date])
  @@index([source])
}

// Deck strategies and archetypes
model Strategy {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String      @unique
  description         String
  archetype           String
  tier                Int?        // Competitive tier (1-4)
  
  // Strategy details as JSON
  gameplan            Json?       // How to play the deck
  keyCards            Card[]      @relation("StrategyCards")
  counterStrategies   String[]
  weaknesses          String[]
  strengths           String[]
  
  // Metadata
  formatId            String?     @db.Uuid
  popularityScore     Int         @default(0)
  
  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  // Indexes
  @@index([archetype])
  @@index([tier])
  @@index([formatId])
}

// Trading system
model TradeOffer {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  offererId         String        @db.Uuid
  receiverId        String        @db.Uuid
  status            TradeStatus   @default(PENDING)
  
  // Trade details as JSON
  offeredCards      Json          // Array of {cardId, quantity, condition}
  requestedCards    Json          // Array of {cardId, quantity, condition}
  
  message           String?
  counterOfferId    String?       @unique @db.Uuid
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  completedAt       DateTime?
  expiresAt         DateTime?
  
  // Relationships
  offerer           User          @relation("OfferedTrades", fields: [offererId], references: [id])
  receiver          User          @relation("RequestedTrades", fields: [receiverId], references: [id])
  counterOffer      TradeOffer?   @relation("CounterOffer", fields: [counterOfferId], references: [id])
  originalOffer     TradeOffer?   @relation("CounterOffer")
  
  // Indexes
  @@index([offererId])
  @@index([receiverId])
  @@index([status])
  @@index([createdAt])
}

// Price alerts for users
model PriceAlert {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  cardId          String
  targetPrice     Decimal       @db.Decimal(10, 2)
  alertType       AlertType     @default(BELOW)
  priceType       PriceType     @default(MARKET)
  currency        Currency      @default(USD)
  isActive        Boolean       @default(true)
  lastTriggered   DateTime?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([cardId])
  @@index([isActive])
}

// Deck matchup tracking
model Matchup {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  deckId          String        @db.Uuid
  opponentDeckId  String        @db.Uuid
  wins            Int           @default(0)
  losses          Int           @default(0)
  draws           Int           @default(0)
  notes           String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  deck            Deck          @relation("DeckMatchups", fields: [deckId], references: [id], onDelete: Cascade)
  opponentDeck    Deck          @relation("OpponentMatchups", fields: [opponentDeckId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([deckId, opponentDeckId])
  
  // Indexes
  @@index([deckId])
  @@index([opponentDeckId])
}

// ==================== ADDITIONAL ENUMS ====================

enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
  EXPIRED
}

enum AlertType {
  ABOVE
  BELOW
}

enum AcquisitionSource {
  PURCHASE
  TRADE
  GIFT
  PACK_OPENING
  TOURNAMENT_PRIZE
  OTHER
}

enum StorageLocation {
  BINDER
  BOX
  DECK
  DISPLAY
  SAFE
  OTHER
}

// ==================== COLLECTION MANAGEMENT MODELS ====================

// Collection tags for organization
model CollectionTag {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  name            String
  color           String        @default("#000000")
  cardCount       Int           @default(0)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, name])
  
  // Indexes
  @@index([userId])
}

// Collection folders for custom organization
model CollectionFolder {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  name            String
  description     String?
  cardIds         String[]      @default([])
  isPublic        Boolean       @default(false)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([isPublic])
}

// Personal notes and ratings for cards
model CardNote {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId          String
  userId          String        @db.Uuid
  note            String
  rating          Int?          // 1-5 stars
  memories        String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  card            Card          @relation(fields: [cardId], references: [id])
  
  // Constraints
  @@unique([cardId, userId])
  
  // Indexes
  @@index([userId])
  @@index([cardId])
}

// Want list items with priority
model WantList {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  cardId          String
  priority        Int           @default(5) // 1-10
  maxPrice        Decimal?      @db.Decimal(10, 2)
  quantity        Int           @default(1)
  notes           String?
  priceAlerts     Json[]        @default([]) // Array of PriceAlert objects
  
  // Timestamps
  dateAdded       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  card            Card          @relation(fields: [cardId], references: [id])
  
  // Constraints
  @@unique([userId, cardId])
  
  // Indexes
  @@index([userId])
  @@index([cardId])
  @@index([priority])
}

// Collection value snapshots for tracking
model CollectionSnapshot {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  totalValue      Decimal       @db.Decimal(12, 2)
  cardCount       Int
  uniqueCards     Int           @default(0)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId, createdAt])
}

// Trading partners for trade matching
model TradingPartner {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  partnerId       String        @db.Uuid
  trustLevel      Int           @default(50) // 0-100
  totalTrades     Int           @default(0)
  successfulTrades Int          @default(0)
  notes           String?
  lastTradeDate   DateTime?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  user            User          @relation("UserPartners", fields: [userId], references: [id], onDelete: Cascade)
  partner         User          @relation("PartnerUsers", fields: [partnerId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, partnerId])
  
  // Indexes
  @@index([userId])
  @@index([partnerId])
}

// Saved searches for quick access
model SavedSearch {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  name            String
  filters         Json          // CollectionSearchFilters
  useCount        Int           @default(0)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  lastUsed        DateTime      @default(now())
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([lastUsed])
}

// Collection backup records
model CollectionBackup {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  cardCount       Int
  totalValue      Decimal       @db.Decimal(12, 2)
  format          String        // json, csv
  compressed      Boolean       @default(false)
  size            Int           // bytes
  
  // Timestamps
  createdAt       DateTime      @default(now())
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId, createdAt])
}

// Shared collection views
model SharedCollection {
  id              String        @id @default(cuid())
  userId          String        @db.Uuid
  config          Json          // CollectionSharingConfig
  shareUrl        String        @unique
  qrCode          String
  views           Int           @default(0)
  expiresAt       DateTime?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([expiresAt])
}

// Shared want lists
model SharedWantList {
  id              String        @id @default(cuid())
  userId          String        @db.Uuid
  config          Json          // Sharing configuration
  expiresAt       DateTime?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([expiresAt])
}

// Saved collection views
model SavedView {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  name            String
  viewConfig      Json          // CollectionView configuration
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
}
// ==================== DATA MAINTENANCE MODELS ====================

// Notification system
model Notification {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @db.Uuid
  type            String
  title           String
  message         String
  data            Json?
  read            Boolean       @default(false)
  readAt          DateTime?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  
  // Relationships
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

// Backup metadata tracking
model BackupMetadata {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  backupId        String        @unique
  type            String        // full, incremental, differential
  size            BigInt
  compressedSize  BigInt?
  location        String
  checksum        String
  duration        Int           // milliseconds
  tablesBackedUp  String[]
  errors          String[]
  retentionDate   DateTime
  
  // Timestamps
  createdAt       DateTime      @default(now())
  
  // Indexes
  @@index([type])
  @@index([createdAt])
  @@index([retentionDate])
}

// Backup restoration records
model BackupRestore {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  backupId        String
  restoredAt      DateTime      @default(now())
  restoredBy      String
  options         Json
  success         Boolean
  error           String?
  
  // Indexes
  @@index([backupId])
  @@index([restoredAt])
}

// Admin action tracking
model AdminAction {
  id              String        @id @default(cuid())
  adminUserId     String
  action          String
  parameters      Json
  timestamp       DateTime      @default(now())
  reason          String
  status          String        // pending, completed, failed
  result          Json?
  auditLog        String[]
  
  // Indexes
  @@index([adminUserId])
  @@index([action])
  @@index([timestamp])
}

// Alert system
model Alert {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  alertId         String        @unique
  severity        String        // critical, warning, info
  type            String
  message         String
  metadata        Json
  acknowledged    Boolean       @default(false)
  acknowledgedBy  String?
  acknowledgedAt  DateTime?
  resolved        Boolean       @default(false)
  resolvedAt      DateTime?
  resolvedBy      String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  
  // Indexes
  @@index([severity])
  @@index([type])
  @@index([acknowledged])
  @@index([resolved])
  @@index([createdAt])
}

// On-call schedule
model OnCallSchedule {
  id              String        @id @default(cuid())
  name            String
  rotation        String        // daily, weekly
  startDate       DateTime
  users           Json          // Array of OnCallUser objects
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Indexes
  @@index([name])
}

// Audit logging
model AuditLog {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auditId         String        @unique
  category        String        // data, user, system, security, admin
  action          String
  actorId         String?
  actorType       String        // user, system, job, api
  targetId        String?
  targetType      String?
  changes         Json?         // { before, after }
  metadata        Json
  ipAddress       String?
  userAgent       String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  
  // Indexes
  @@index([category])
  @@index([action])
  @@index([actorId])
  @@index([targetId])
  @@index([createdAt])
}

// Deck migration tracking for format rotations
model DeckMigration {
  id                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  deckId                  String        @db.Uuid
  formatRotationDate      DateTime
  illegalCards            Json          // Array of illegal card info
  suggestedReplacements   Json          // Array of replacement suggestions
  estimatedCost           Decimal       @db.Decimal(10, 2)
  autoFixAvailable        Boolean
  wasApplied              Boolean       @default(false)
  appliedAt               DateTime?
  
  // Timestamps
  createdAt               DateTime      @default(now())
  
  // Relationships
  deck                    Deck          @relation(fields: [deckId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([deckId])
  @@index([formatRotationDate])
}